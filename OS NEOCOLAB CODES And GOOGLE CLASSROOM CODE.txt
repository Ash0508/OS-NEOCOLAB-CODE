Q1. Write a shell program to check whether the given number is prime or not.
read -p "Enter a number: " n
i=2
while [ $i -lt $n ];
do
        if [ $(($n % $i)) -eq 0 ]
        then
                echo "The number is not  prime"
                exit 0
        fi
        ((i=i+1))
done
echo "The number is prime"

Q2. Write a shell program to display the factorial of the given number.
read -p "Enter a number :" n
factorial=1
while [[ $n -gt 0 ]];
do
factorial="$(($factorial * $n))"
n="$(($n - 1))"
done
echo "factorial is $factorial"

Q3. write a shell program to print the reverse of the given number.
read -p  "Enter a number: " n
reverseNumber=0

while [[ $n -gt 0 ]];
do
reverseNumber="$((reverseNumber*10))"
num="$(($n%10))"
reverseNumber="$(($reverseNumber+$num))"
n="$(($n/10))"
done
echo "Reverse Number : $reverseNumber"

Q4. write a shell program to print the lucky number of the given number.
read -p "Enter a number: " n
sum=0
while [[ $n -ge 10 ]];
do
	sum=0
	while [[ $n -gt 0 ]];
	do
		r="$(( $n % 10 ))"
		sum="$(( $sum + $r ))"
		n="$(( $n / 10 ))"
	done
	n=$sum
done
echo $n




Q5. write a shell program to read a number and print the Fibonacci series of first n numbers.
read -p "Enter number of terms: " n
a=0
b=1
count=2
echo "Fibonacci series:"
echo $a
echo $b
while [ $count -le $n ]
do
	fib=`expr $a + $b`
	a=$b
	b=$fib
	echo $fib
	count=`expr $count + 1`
done

Q6. write a shell program to read n numbers and print the maximum, minimum, and average of the given n numbers.
read -p "Enter Size:" N
i=1
max=0
sum=0
min=0

echo "Enter Numbers: "

while [ $i -le $N ]
do
  read num
  if [ $i -eq 1 ]
  then
      max=$num
  else
      if [ $num -gt $max ]
      then
      	max=$num
      fi
  fi
  if [ $i -eq 1 ]
  then
      min=$num
  else
      if [ $num -lt $min ]
      then
      	min=$num
      fi
  fi
  sum=$((sum + num))
  i=$((i + 1))
done
avg=$(echo $sum / $N | bc -l)
echo "Maximum: "$max
echo "Minimum: "$min
echo "Average: "$avg



Q1. Write a shell program to display maximum of two numbers.
echo "Enter two numbers:   "
read num1
read num2
if [ $num1 -gt $num2 ]
then
    echo $num1"is maximum"
else
    echo $num2"is maximum"
fi

Q2. Write a shell program to display minimum of two numbers.
echo "Enter two numbers: "
read num1
read num2
if [ $num1 -lt $num2 ]
then
    echo $num1" is minumum."
else
    echo $num2" is minimum."
fi

Q3. Write a shell program to display maximum of three numbers.
echo "Enter three numbers: "
read num1
read num2
read num3
if [ $num1 -gt $num2 -a $num1 -gt $num3 ]
then
    echo $num1"is maximum."
elif [ $num2 -gt $num1 -a $num2 -gt $num3 ]
then
    echo $num2" is maximum."
else
    echo $num3" is maximum."
fi

Q4. Write a shell program to display minimum of three numbers.
echo "Enter three numbers: "
read num1
read num2
read num3
if [ $num1 -lt $num2 -a $num1 -lt $num3 ]
then
    echo $num1" is minimum."
elif [ $num2 -lt $num1 -a $num2 -lt $num3 ]
then
    echo $num2" is minimum."
else
    echo $num3" is minimum."
fi

Q5. Write a shell program to display second maximum of three numbers.
echo "Enter three numbers: "
read num1
read num2
read num3
if [ $num1 -gt $num2 -a $num1 -lt $num3 -o $num1 -gt $num3 -a $num1 -lt $num2 ]
then
    echo $num1" is second largest."
elif [ $num2 -gt $num1 -a $num2 -lt $num3 -o $num2 -gt $num3 -a $num2 -lt $num1 ]
then
    echo $num2" is second largest."
else
    echo $num3" is second largest."
fi


Q1. Write a shell program to read the filename as input. Display the each line along with the number of words and number of characters each line.

read -p "Enter the filename: " file
while read -r line;
do
        char=$(echo -n "$line" |wc -m)
        word=$(echo "$line" | wc -w)
        echo "Text: $line"
        echo "Number of characters: $(($char-4))"
        echo "Number of words: $((word))"
done < "$file"

Q2. Write a script to check whether the given string is a palindrome.

read -p "Enter " str
str1=$(rev <<< $str)
if [ $str1 == $str ]
then
echo "$str is palindrome."
else
echo "$str is not palindrome."
fi

Q3. Write a shell script that accepts a string from the terminal and echo a suitable message if it doesn’t have at least 5 characters, including the other symbols.

read -p "Enter a string: " str
len=$(echo -n "$str" | wc -c)
if [ $len -lt 9 ]
then
echo "$str doesn't have atleast 5 characters."
fi

Q1. Write a shell script that accepts two directory names as arguments and deletes those files in the first directory which are similarly named in the second directly
Note: Contents should also match inside the files.
read -p "Enter dir 1: " SRC
read -p "Enter dir 2: " DST
 
if [ ! -d $SRC ]
then
        echo "Directory $SRC does not exists!"
        exit 2
fi
 
 
if [ ! -d $DST ]
then
        echo "Directory $DST does not exists!"
        exit 2
fi
 
for f in $DST/*
do
        if [ -f $f ]
        then
                tFile="$SRC/$(basename $f)"
                if [ -f $tFile ]
                then
                        echo "Deleting $tFile.."
                        /bin/rm $tFile
                        [ $? -eq 0 ] && echo "done" || echo "failed"
 
                fi
        fi
done

Q2. Write a shell script to display the processes running on the system for every 30 seconds, but only for 3 times.
for r in 1 2 3
do
	ps
	sleep 3
done

Q3. Write a shell script that displays the last modification time of any file.
read -p "Enter a filename to check last modification time : " fname
if [ ! -f $fname ]
then
	echo "$fname not a file"
	exit 1
fi 
echo "$fname was last modified on $(date -r $fname)"

Q1. Write a shell script like a more command. It asks for the file name on the command prompt and displays only 15 lines of the file at a time on the screen. Further, the next 15 lines will be displayed only when the user presses the enter key / any other key.
read -p "Enter filename: " file
exec 3<&0
while read line
do
	if [ $counter -eq 15 ]
	then
		counter=0
		echo "Press any key to continue..."
		read -u 3 enterKey
	fi
	echo $line
	(( counter++ ))
done < $file

Q2. Write a shell script that counts English language articles (a,an,the) in a text file.
read -p "Enter filename: " file
a=0
an=0
the=0
while read line
do
	for w in $line
	do
	lword="$(echo $w | tr '[A-Z' '[a-z]')"
	[ $lword = 'a' ] && (( a++ )) || :
	[ $lword = 'the' ] && (( the++ )) ||:
	[ $lword = 'an' ] && (( an++ )) ||:
	done
done < $file
echo "a article occured $a times"
echo "an article occured $an times"
echo "the article occured $the times"

Q3. Write the shell script to replace each character ‘c’ occurrence with the characters in ‘a’ string s. It should also display the number of replacements.
string="Hello World! This is OS class. Test C c c c a"
#string="cccccc"
out=""
for ((i=0;i<${#string};i++)); do
	char=${string:i:1}
	updated="${char/c/a}"
	final="${updated/C/A}"
	out+=$final
done
echo "OLD: $string"
echo "NEW: $out"
echo "Replacements:"
echo  $string | grep -o "[c|C]" | wc -l

Q4. Write a shell program to concatenate two strings given as input and display the resultant string along with its string length.
read -p "Enter first string: " str1
read -p "Enter second string: " str2
final="$str1$str2"
echo $final
len=${#final}
echo "Length of resultant string is: $len"

Q5. Write a shell program to simulate a simple calculator.
read -p "Enter first number: " a
read -p "Enter second number: " b

echo "Enter Choice :"
echo "1. Addition"
echo "2. Subtraction"
echo "3. Multiplication"
echo "4. Division"
read ch

# Switch Cases
case $ch in
1)res=`echo $a + $b | bc`
;;
2)res=`echo $a - $b | bc`
;;
3)res=`echo $a \* $b | bc`
;;
4)res=`echo "scale=2; $a / $b" | bc`
;;
esac
echo "Result : $res"

Q6. Write a shell program to count the following in a text
file:


● Number of vowels in a given text file


● Number of blank spaces


● Number of characters


● Number of lines

read -p "Enter file name: " file
exec 3<&0
while read -n 1 c
do
l="$(echo $c | tr '[A-Z]' '[a-z]')"
[ "$l" == "a" -o "$l" == "e" -o "$l" == "i" -o "$l" == "o" -o "$l" == "u" ] && (( v++ )) || :
done<$file
echo "Vowels : $v"
echo "Characters : $(cat $file | wc -c)"
echo "Blank lines : $(grep  -c '^$' $file)"
echo "Lines : $(cat $file|wc -l )"


# You are using bash


read n
if (( n%2 == 0))
then
    echo "Even"
else
    echo "Odd"
    
fi



# You are using bash

read n
s=0
for(( i=1;i<=n;i++))
do 
    read num
    s=$((s+num))
done
s=$(( s/n ))
echo "$s"


# You are using bash

read n
c=0
for(( i=2;i<=n;i++ ))
do
   if (( n%i==0 ))
   then 
       c=$(( c+1 ))
   fi
done

if (( c==0 ))
then
    echo "Not Prime"
else
    echo "Prime"
fi

------------------------------------------------------------------------------------------------------

// Round Robin

//Simulation of Round-Robin Scheduling algorithm used in Operating systems//
//Fixed time slice of 2 is used.Process queue is implemented a sLinked list//
//The program is tuned for 10 processes and Buurst times need to be entered//


#include <stdio.h>
#include <iostream>
#include <malloc.h>


struct node
{
	int arrival;
	int burst;
	int burst1;
	int turnaround;
	int waiting;
	int finish;
	int res;
	int name;

	struct node *next;
};

struct node *head = NULL;
struct node *tail = NULL;


int empty()
{
	if (head == NULL)
		return 1;
	else
		return 0;
}

void append (struct node *temp)
{			
	if (head == NULL)
	{
		head = temp;
		tail = temp;
		temp->next=NULL;
	}
	else
	{
		tail -> next = temp;
		tail = temp;
		tail -> next = NULL;
	}
}

struct node* serve ()
{
	struct node *temp;
	if (!empty())
	{
		temp = head;
		head = head -> next;

		return temp;			
	}
	else
	{
		//std::cout<<"Ready q is empty"<<"\n";
		temp = new(node);
		temp -> name = 0;
		return temp;
	}
}	

int main()
{
	int max;

	struct node *p[10];
	struct node *exe;

	int quantum;
	int period = 0;
	int count = 0;
	int i;
	int choice;

	double totalWaiting = 0;
	double avgWaiting;
	
//	std::cout<<"Enter number of process taken :";
	std::cin>>max;
	
//	std::cout<<"Enter Time Quantum value: ";
	std::cin>>quantum;

 for (i = 0; i < max; i++)
		{	p[i] =new(node);
			p[i] -> turnaround = 0;
			p[i] -> waiting = 0;
			p[i] -> finish = 0;
			p[i] -> name = i + 1;
			p[i] -> res=-1;
			p[i] -> next = NULL;
		}

			for (i = 0; i < max; i++)
			{
				std::cin>>p[i] -> arrival;
			//	std::cout<<i<<" arival time is "p[i]->arrival << "\n";
			}

		for (i = 0; i < max; i++)
		{
			std::cin>>p[i] -> burst; 
			p[i] -> burst1 = p[i] -> burst;
		}


		int t=0;
	while (count < max)
		{
				while(t < max && p[t]->arrival <= period ) 
				{					
						append (p[t]);
						t=t+1;
				}
			exe = new(node);
			exe = serve();
        //    getchar();
			if (exe -> name != 0)
			{
				if( exe -> res ==-1)
				     exe -> res=period - exe->arrival;
				if (exe -> burst1 > quantum)
				{
//				printf ("%d\t\t", period); 
					exe -> burst1 = exe -> burst1 - quantum;
					period = period + quantum;

//					printf ("%d\t\t%d\t\t%d\t\t%d\tQ\n", period, exe -> name, exe -> arrival, exe -> burst1);
					
					if (choice ==2 || choice ==3)
					{
						while(t < max && p[t]->arrival <= period ) 
						{					
							append (p[t]);
							t=t+1;
						}
					}

						append (exe); 
							
//					getch();
				} 
				else
				{
					//if (exe -> burst1 != 0)
					{
//						std::cout<< period<<"   ";
						period = period + exe -> burst1;
						exe -> burst1 = 0;
						exe -> finish = period;
						exe -> turnaround = exe -> finish - exe -> arrival;
						exe -> waiting = exe -> turnaround - exe -> burst;

						count ++;

						for (i = 0; i < max; i++)
						{
							if (p[i] -> name == exe -> name)
							{
								p[i] = exe;
							}
						}


//						printf ("\t\t%d\t\t%d\t\t%d\t\t%d\tFinish\n", period, exe -> name, exe -> arrival, exe -> burst1);						
						
//						getch();
					}
				}
			} 
			else
			{
									

				period = period + 1;
									
			}		
		} 

//		std::cout<<" \n\n\n";

//		printf("Process\t\tFinish time\t\tTurnAround time\t\tWaiting time\t\t Response Time\n");

		int totalturnaround=0;
		int totalres=0;
		for (i = 0; i < max; i++)
		{totalWaiting = totalWaiting + p[i] -> waiting;
		  totalturnaround= totalturnaround + p[i]->turnaround;
		  totalres=totalres + p[i] -> res;
		}
		avgWaiting = totalWaiting / max;
		double avgTT=totalturnaround*1.0/max;
		double avgres=totalres*1.0/max;
		//std::cout<<"\n\n";
		std::cout<<avgWaiting<<"\n";
		std::cout<<avgTT<<"\n";
		std::cout<<avgres<<"\n";
		
} 

---------------------------------------------------------------------------------------------------------

//Priority Scheduling Algorithm

#include <stdio.h>

#include <iostream>
#include <malloc.h>


struct node
{
	int arrival;
	int burst;
	int priority;
	int turnaround;
	int waiting;
	int finish;
	int name;

	struct node *next;
};

struct node *head = NULL;
struct node *tail = NULL;


int empty()
{
	if (head == NULL)
		return 1;
	else
		return 0;
}

void append (struct node *temp)
{			
	if (head == NULL)
	{
		head = temp;
		tail = temp;
		temp->next=NULL;
	}
	else
	{ struct node *t,*previous;
	    if (head->priority>temp->priority)
	    {
	    	temp->next=head;
	    	head =temp;
	    	return ;
		}
		previous=head;
		t=head->next;
		while(t!=NULL && t->priority <= temp->priority)
		{
			previous=t;
			t=t->next;
		}
		temp -> next = t;
		previous->next = temp;
		return ; 
	}
}

struct node* serve ()
{
	struct node *temp;
	if (!empty())
	{
		temp = head;
		head = head -> next;

		return temp;			
	}
	else
	{
		//std::cout<<"Ready q is empty"<<"\n";
		temp = new(node);
		temp -> name = 0;
		return temp;
	}
}	

int main()
{
	int max;

	struct node *p[10];
	struct node *exe;

	int period = 0;
	int count = 0;
	int i;
	int choice;

	double totalWaiting = 0;
	double avgWaiting;
	
	scanf("%d",&max);
	
	
	
	 for (i = 0; i < max; i++)
		{	p[i] =new(node);
			p[i] -> turnaround = 0;
			p[i] -> waiting = 0;
			p[i] -> finish = 0;
			p[i] -> name = i + 1;
			p[i] -> next = NULL;
		}

			for (i = 0; i < max; i++)
			{
			//	std::cin>>p[i] -> arrival;
				scanf("%d",&p[i]->arrival);
			}
	
		for (i = 0; i < max; i++)
		{
		//	std::cin>>p[i] -> burst; 
			scanf("%d",&p[i]->burst);
		}
		for (i = 0; i < max; i++)
		{
		//	std::cin>>p[i] -> burst; 
			scanf("%d",&p[i]->priority);
		}
	
		
		int t=0;
	while (count < max)
		{
				while(t < max && p[t]->arrival <= period ) 
				{					
						append (p[t]);
						t=t+1;
				}
			exe = new(node);
			exe = serve();
        //    getchar();
			if (exe -> name != 0)
			{
					     period=period+exe->burst;
						exe -> finish = period;
						exe -> turnaround = exe -> finish - exe -> arrival;
						exe -> waiting = exe -> turnaround - exe -> burst;

						count ++;

						for (i = 0; i < max; i++)
						{
							if (p[i] -> name == exe -> name)
							{
								p[i] = exe;
							}
						}


						
					
			} 
			else
			{
								

				period = period + 1;
									
			}		
		} 

	
		int totalturnaround=0;
		for (i = 0; i < max; i++)
		{totalWaiting = totalWaiting + p[i] -> waiting;
		  totalturnaround= totalturnaround + p[i]->turnaround;
		}
		avgWaiting = totalWaiting *1.0 / max;
		double avgTT=totalturnaround*1.0/max;
		printf("%.2f\n",avgWaiting);
		printf("%.2f",avgTT);
		
	
 
}




// SJF Scheduling Algorithm


#include <stdio.h>
#include <iostream>
#include <malloc.h>


struct node
{
	int arrival;
	int burst;
	int turnaround;
	int waiting;
	int finish;
	int name;

	struct node *next;
};

struct node *head = NULL;
struct node *tail = NULL;


int empty()
{
	if (head == NULL)
		return 1;
	else
		return 0;
}

void append (struct node *temp)
{			
	if (head == NULL)
	{
		head = temp;
		tail = temp;
		temp->next=NULL;
	}
	else
	{ struct node *t,*previous;
	    if (head->burst>temp->burst)
	    {
	    	temp->next=head;
	    	head =temp;
	    	return ;
		}
		previous=head;
		t=head->next;
		while(t!=NULL && t->burst <= temp->burst)
		{
			previous=t;
			t=t->next;
		}
		temp -> next = t;
		previous->next = temp;
		return ; 
	}
}

struct node* serve ()
{
	struct node *temp;
	if (!empty())
	{
		temp = head;
		head = head -> next;

		return temp;			
	}
	else
	{
		//std::cout<<"Ready q is empty"<<"\n";
		temp = new(node);
		temp -> name = 0;
		return temp;
	}
}	

int main()
{
	int max;

	struct node *p[10];
	struct node *exe;

	int period = 0;
	int count = 0;
	int i;
	int choice;

	double totalWaiting = 0;
	double avgWaiting;
	
	scanf("%d",&max);
	
	
	
	 for (i = 0; i < max; i++)
		{	p[i] =new(node);
			p[i] -> turnaround = 0;
			p[i] -> waiting = 0;
			p[i] -> finish = 0;
			p[i] -> name = i + 1;
			p[i] -> next = NULL;
		}

			for (i = 0; i < max; i++)
			{
			//	std::cin>>p[i] -> arrival;
				scanf("%d",&p[i]->arrival);
			}
	
		for (i = 0; i < max; i++)
		{
		//	std::cin>>p[i] -> burst; 
			scanf("%d",&p[i]->burst);
		}

	
		
		int t=0;
	while (count < max)
		{
				while(t < max && p[t]->arrival <= period ) 
				{					
						append (p[t]);
						t=t+1;
				}
			exe = new(node);
			exe = serve();
        //    getchar();
			if (exe -> name != 0)
			{
					     period=period+exe->burst;
						exe -> finish = period;
						exe -> turnaround = exe -> finish - exe -> arrival;
						exe -> waiting = exe -> turnaround - exe -> burst;

						count ++;

						for (i = 0; i < max; i++)
						{
							if (p[i] -> name == exe -> name)
							{
								p[i] = exe;
							}
						}


						
					
			} 
			else
			{
								

				period = period + 1;
									
			}		
		} 

	
		int totalturnaround=0;
		for (i = 0; i < max; i++)
		{totalWaiting = totalWaiting + p[i] -> waiting;
		  totalturnaround= totalturnaround + p[i]->turnaround;
		}
		avgWaiting = totalWaiting *1.0 / max;
		double avgTT=totalturnaround*1.0/max;
		printf("%.2f\n",avgWaiting);
		printf("%.2f",avgTT);

}


--------------------------------------------------------------------------------------------------------


//Deadlocks

// implement Bankers Algorithm


#include<stdio.h>

int safety(int allocation[][10],int need[][10],int avilable[],int n,int m)
{
	int work[m],finish[n],i,j,flag;
	for(i=0;i<n;i++)
	    finish[i]=0;
	for(i=0;i<m;i++)
	    work[i]=avilable[i];
	do
	{
	 flag=0;    
	 i=0;
	while(i<n)
	{
	   if(finish[i]==0)
	   {
	   	for(j=0;j<m;j++)
	   	  if(work[j]<need[i][j])
	   	     break;
	   	if(j==m)
	   	 {
	   		for(j=0;j<m;j++)
	   		   work[j]+=allocation[i][j];
	   		finish[i]=1;
	   	//	printf("Process %d is completed\n",i);
	   		flag=1;
	      } 
	      
		}
		i=i+1;
			
	}
}while(flag);
for(i=0;i<n;i++)
	if(finish[i]==0)
	  return 0;
	  
return 1;
}

int main()
{
	int i,j,k,n,m,allocation[10][10], max[10][10], need[10][10], avilable[10],request[10],pn;
	//("Enter the values of n and m");
	scanf("%d%d",&n,&m);
	////printf("Enter the max matrix");
	for(i=0;i<n;i++)
	   for(j=0;j<m;j++)
	      scanf("%d",&max[i][j]);
	//printf("Enter Allocation Matrix");
	for(i=0;i<n;i++)
	   for(j=0;j<m;j++)
	      scanf("%d",&allocation[i][j]);
    for(i=0;i<n;i++)
	   for(j=0;j<m;j++)
	      need[i][j]=max[i][j]-allocation[i][j];
	      
	
//	printf("Enter The avilable vector:");
	for(i=0;i<m;i++)
	  scanf("%d", &avilable[i]);
	  
//	printf("The need matrix is");
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		   printf("%d\t",need[i][j]);
		printf("\n");
	}
//	printf("Enter Process number: ");
	scanf("%d",&pn);
//	printf("Enter Request Vector\n");
	for(i=0;i<m;i++)
	   scanf("%d",&request[i]);
	for(i=0;i<m;i++)
	  if(request[i]>need[pn][i])
	     break;
	if(i<m)
	{
		printf("0\n");
		return 0;
	}
	for(i=0;i<m;i++)
	{
		if(request[i]>avilable[i])
		   {
		   	 printf("1\n");
		   	 return 0;
	      }
	}
	for(i=0;i<m;i++)
	{
		avilable[i]=avilable[i]-request[i];
		allocation[pn][i]=allocation[pn][i]+request[i];
		need[pn][i]=need[pn][i]-request[i];
	}
	
/*	printf("The need matrix is");
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		   printf("%d\t",need[i][j]);
		printf("\n");
	}
	
	printf("The allocation matrix is");
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		   printf("%d\t",allocation[i][j]);
		printf("\n");
	}
	
	
	printf("The avilable vector is");
		for(j=0;j<m;j++)
		   printf("%d\t",avilable[j]);
		printf("\n");
	
	
	*/
		  	  
	i=safety(allocation,need,avilable,n,m);
	if(i==1)
	   printf("2\n");
	else
	   printf("3\n");
	   
	
	return 0;
	 }



// Implement multiple instance Deadlock Detection Algorithm


#include<stdio.h>

int safety(int allocation[][10],int request[][10],int avilable[],int n,int m)
{
	int work[m],finish[n],i,j,flag;
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		  if(allocation[i][j]>0)
		     break;
		if(j<m)
		   finish[i]=0;
		else
		   finish[i]=1;
	}
	for(i=0;i<m;i++)
	    work[i]=avilable[i];
	do
	{
	 flag=0;    
	 i=0;
	while(i<n)
	{
	   if(finish[i]==0)
	   {
	   	for(j=0;j<m;j++)
	   	  if(work[j]<request[i][j])
	   	     break;
	   	if(j==m)
	   	 {
	   		for(j=0;j<m;j++)
	   		   work[j]+=allocation[i][j];
	   		finish[i]=1;
	   	//	printf("Process %d is completed\n",i);
	   		flag=1;
	   		i=n;
	      } 
	      
		}
		i=i+1;
			
	}
}while(flag);
for(i=0;i<n;i++)
	if(finish[i]==0)
	  return 0;
	  
return 1;
}

int main()
{
	int i,j,k,n,m,allocation[10][10], request[10][10], avilable[10];
//	printf("Enter the values of n and m");
	scanf("%d%d",&n,&m);
//printf("Enter Allocation Matrix");
	for(i=0;i<n;i++)
	   for(j=0;j<m;j++)
	      scanf("%d",&allocation[i][j]);
//	printf("Enter the request matrix");
	for(i=0;i<n;i++)
	   for(j=0;j<m;j++)
	      scanf("%d",&request[i][j]);
//	printf("Enter The avilable vector:");
	for(i=0;i<m;i++)
	  scanf("%d", &avilable[i]);
	  
		  	  
	i=safety(allocation,request,avilable,n,m);
	if(i==1)
	   printf("1\n");
	else
	   printf("0\n");
	   
	
	return 0;
	 }




// Page Replacement

// You are using GCC
#include <iostream>
#include <vector>
#include <unordered_map>
#include <list>

using namespace std;

int lruPageFaults(const vector<int>& refString, int numFrames) {
    list<int> frameList;
    unordered_map<int, list<int>::iterator> frameMap;
    int pageFaults = 0;

    for (int page : refString) {
        if (frameMap.find(page) == frameMap.end()) {
            if (frameList.size() < numFrames) {
                frameList.push_front(page);
            } else {
                int lruPage = frameList.back();
                frameList.pop_back();
                frameMap.erase(lruPage);
                frameList.push_front(page);
            }
            frameMap[page] = frameList.begin();
            pageFaults++;
        } else {
            frameList.erase(frameMap[page]);
            frameList.push_front(page);
            frameMap[page] = frameList.begin();
        }
    }

    return pageFaults;
}

int main() {
    int length;
   // cout << "Enter the length of the reference string: ";
    cin >> length;

    vector<int> refString(length);
    //cout << "Enter the reference string page numbers: ";
    for (int i = 0; i < length; i++) {
        cin >> refString[i];
    }

    int numFrames;
    //cout << "Enter the number of frames allotted: ";
    cin >> numFrames;

    int faults = lruPageFaults(refString, numFrames);
    cout << faults << endl;

    return 0;
}



// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    int s;
    cin>>s;
    int a[s];
    int f;
    for(int i=0;i<s;i++)
    {
        cin>>a[i];
    }
    cin>>f;
    int pf=0;
    int m,n,se,pa;
    pa=sizeof(a)/sizeof(a[0]);
    int t[f];
    for(m=0;m<f;m++)
    {
        t[m]=-1;
    }
    for(m=0;m<pa;m++)
    {
        se=0;
        for(n=0;n<f;n++){
            if(a[m]==t[n])
            {
            se++;
            pf--;
            }   
    }
    pf++;
    if((pf<=f)&&(se==0))
    {
        t[m]=a[m];
    }
    else if(se==0)
    {
        t[(pf-1)%f]=a[m];
    }
    }
    cout<<pf;
    return 0;
}

//FCFS Disk Scheduling

//Disk Scheduling

#include <iostream>
#include <vector>
#include <cmath>

int fcfsDiskScheduling(int currentPosition, const std::vector<int>& requests) {
    int totalHeadMovement = 0;
    
    for (int i = 0; i < requests.size(); i++) {
        totalHeadMovement += std::abs(currentPosition - requests[i]);
        currentPosition = requests[i];
    }
    
    return totalHeadMovement;
}

int main() {
    int currentPosition, numRequests;
    std::vector<int> requests;
    
    std::cin >> currentPosition;
    std::cin >> numRequests;
    
    for (int i = 0; i < numRequests; i++) {
        int request;
        std::cin >> request;
        requests.push_back(request);
    }
    
    int totalHeadMovement = fcfsDiskScheduling(currentPosition, requests);
    
    std::cout << totalHeadMovement << std::endl;
    
    return 0;
}


//STTF Disk Scheduling
// You are using GCC
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

int sstfDiskScheduling(int currentPosition, const std::vector<int>& requests) {
    int totalHeadMovement = 0;
    std::vector<int> sortedRequests = requests;
    
    std::sort(sortedRequests.begin(), sortedRequests.end(), [currentPosition](int a, int b) {
        return std::abs(a - currentPosition) < std::abs(b - currentPosition);
    });
    
    for (int i = 0; i < sortedRequests.size(); i++) {
        totalHeadMovement += std::abs(currentPosition - sortedRequests[i]);
        currentPosition = sortedRequests[i];
    }
    
    return totalHeadMovement;
}

int main() {
    int currentPosition, numRequests;
    std::vector<int> requests;
    
    std::cin >> currentPosition;
    std::cin >> numRequests;
    
    for (int i = 0; i < numRequests; i++) {
        int request;
        std::cin >> request;
        requests.push_back(request);
    }
    
    int totalHeadMovement = sstfDiskScheduling(currentPosition, requests);
    
    std::cout << totalHeadMovement << std::endl;
    
    return 0;
}





